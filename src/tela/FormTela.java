/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tela;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Lidiane Pimenta
 */
public class FormTela extends javax.swing.JFrame {

    /**
     * Creates new form FormTela
     */
    public FormTela() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        cboxOpcao = new javax.swing.JComboBox<>();
        txtValor = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnConverter = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitulo.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lblTitulo.setText("CONVERSÃO DE NÚMEROS ");

        cboxOpcao.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        cboxOpcao.setMaximumRowCount(2);
        cboxOpcao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Arábico", "Romano" }));
        cboxOpcao.setSelectedItem(null);
        cboxOpcao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxOpcaoActionPerformed(evt);
            }
        });

        txtValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtValorActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        jLabel1.setText("Digite um valor:");

        jLabel2.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        jLabel2.setText("Escolha para qual tipo será convertido:");

        btnConverter.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        btnConverter.setText("Converter");
        btnConverter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConverterActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        jLabel3.setText("Resultado:");

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel4.setText("ARÁBICO-ROMANO");

        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        jScrollPane1.setViewportView(txtResultado);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(164, 164, 164)
                                        .addComponent(btnConverter)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addGap(2, 2, 2)
                                .addComponent(cboxOpcao, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblTitulo)
                        .addGap(111, 111, 111))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cboxOpcao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnConverter)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConverterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConverterActionPerformed
        //###########################################################################//
        //verifica qual opção selecionada
        switch (cboxOpcao.getSelectedIndex()) {

            //OPÇÃO ARÁBICA
            case 0:

                //verifica se o campo não está vazio
                if (!txtValor.getText().trim().equals("")) {

                    //verifica se não há números sendo inseridos
                    Pattern pattern = Pattern.compile("[A-Za-z]");
                    Matcher match = pattern.matcher(txtValor.getText());
                    if (match.find()) {

                        boolean ok;

                        do {
                            try {
                                ok = true;

                                //recebe e lê o arquivo com números romanos
                                FileInputStream arqRomano = new FileInputStream("numeros-romanos.txt");
                                InputStreamReader arqRomanoReader = new InputStreamReader(arqRomano);
                                BufferedReader romanoReader = new BufferedReader(arqRomanoReader);

                                //recebe e lê o arquivo com números arábicos
                                FileInputStream arqArabico = new FileInputStream("numeros-arabicos.txt");
                                InputStreamReader arqArabicoReader = new InputStreamReader(arqArabico);
                                BufferedReader arabicoReader = new BufferedReader(arqArabicoReader);

                                String numRomano = null;
                                List<String> linhasRomano = new ArrayList<>();
                                //irá percorrer o arquivo de números romanos e guardar as linhas em um ArrayList
                                while ((numRomano = romanoReader.readLine()) != null) {
                                    linhasRomano.add(numRomano);
                                }

                                String numArabico = null;
                                List<String> linhasArabico = new ArrayList<>();
                                //irá percorrer o arquivo de números arábicos e guardar as linhas em um ArrayList
                                while ((numArabico = arabicoReader.readLine()) != null) {
                                    linhasArabico.add(numArabico);
                                }

                                //percorre o ArrayList de números romanos para verificar se dentro há um valor igual ao que o usuário inseriu
                                for (int i = 0; i < linhasRomano.size(); i++) {
                                    //se encontrar o mesmo valor inserido dentro da lista de números romanos...
                                    if (linhasRomano.get(i).equalsIgnoreCase(txtValor.getText())) {
                                        //guarda a posição do valor
                                        int numRomanoPosicao = i;
                                        //procura o valor convertido na lista de números arábicos na mesma posição que foi encontrado na lista de números romanos
                                        txtResultado.setText("Convertido para número arábico é: " + linhasArabico.get(numRomanoPosicao));
                                        break;
                                    } else {
                                        txtResultado.setText("Número não pôde ser convertido.");
                                    }
                                }

                                //caso ocorra algum erro com o arquivo (seja para localizá-lo ou lê-lo)
                            } catch (IOException e) {
                                txtResultado.setText("Erro com o arquivo." + e);
                                ok = false;
                            }
                        } while (!ok);

                    } else {
                        txtResultado.setText("Digite somente letras.");
                    }
                } else {
                    txtResultado.setText("O campo \"Digite um valor\" precisa ser preenchido.");
                }
                break;

            //###########################################################################//
            //OPÇÃO ROMANO
            case 1:
                //verifica se o campo não está vazio
                if (!txtValor.getText().trim().equals("")) {

                    //verifica se somente números são inseridos
                    Pattern pattern = Pattern.compile("[a-z-A-Z]");
                    Matcher match = pattern.matcher(txtValor.getText());
                    if (!match.find()) {

                        //valida se o número é igual a 0, pois não existe a conversão de 0 em número romano
                        if ((Integer.parseInt(txtValor.getText())) == 0) {
                            txtResultado.setText("Não existe conversão do número 0 para número romano.");
                        } else {
                            boolean ok;
                            do {
                                try {
                                    ok = true;

                                    //recebe e lê o arquivo com números arábicos
                                    InputStream arqArabico = new FileInputStream("numeros-arabicos.txt");
                                    InputStreamReader arqArabicoReader = new InputStreamReader(arqArabico);
                                    BufferedReader arabicoReader = new BufferedReader(arqArabicoReader);

                                    //recebe e lê o arquivo com números romanos
                                    InputStream arqRomano = new FileInputStream("numeros-romanos.txt");
                                    InputStreamReader arqRomanoReader = new InputStreamReader(arqRomano);
                                    BufferedReader romanoReader = new BufferedReader(arqRomanoReader);

                                    String numArabico = null;
                                    List<String> linhasArabico = new ArrayList<>();
                                    //irá percorrer o arquivo de números arábicos e guardar as linhas em um ArrayList
                                    while ((numArabico = arabicoReader.readLine()) != null) {
                                        linhasArabico.add(numArabico);
                                    }

                                    String numRomano = null;
                                    List<String> linhasRomano = new ArrayList<>();
                                    //irá percorrer o arquivo de números romanos e guardar as linhas em um ArrayList
                                    while ((numRomano = romanoReader.readLine()) != null) {
                                        linhasRomano.add(numRomano);
                                    }

                                    //percorre o ArrayList de números arábicos para verificar se dentro há um valor igual ao que o usuário inseriu
                                    for (int i = 0; i < linhasArabico.size(); i++) {
                                        //se encontrar o mesmo valor inserido dentro da lista de números arábicos...
                                        if (linhasArabico.get(i).equalsIgnoreCase(txtValor.getText())) {
                                            //guarda a posição do valor
                                            int numArabicoPosicao = i;
                                            //procura o valor convertido na lista de números romanos na mesma posição que foi encontrado na lista de números arábicos
                                            txtResultado.setText("Convertido para número romano é: " + linhasRomano.get(numArabicoPosicao));
                                            break;
                                        } else {
                                            txtResultado.setText("Número não pôde ser convertido.");
                                        }
                                    }

                                    //caso ocorra algum erro com o arquivo (seja para localizá-lo ou lê-lo)
                                } catch (IOException e) {
                                    txtResultado.setText("Erro com o arquivo." + e);
                                    ok = false;
                                }
                            } while (!ok);
                        }

                    } else {
                        txtResultado.setText("Digite somente números (e positivos).");
                    }
                } else {
                    txtResultado.setText("O campo \"Digite um valor\" precisa ser preenchido.");
                }
                break;

            default:
                txtResultado.setText("É preciso escolher o tipo de conversão.");
                break;
        }


    }//GEN-LAST:event_btnConverterActionPerformed
    
    private void cboxOpcaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxOpcaoActionPerformed

    }//GEN-LAST:event_cboxOpcaoActionPerformed

    private void txtValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtValorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtValorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormTela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormTela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConverter;
    private javax.swing.JComboBox<String> cboxOpcao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTextArea txtResultado;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables
}
